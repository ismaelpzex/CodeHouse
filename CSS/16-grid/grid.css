.container {
    width: 80%;
    min-width: 800px;
    margin: 2rem auto;
}

.caja-padre {
    margin-bottom: 1rem;
    border: 3px solid black;
    background: white;
    height: 500px;

    display: grid;                                        /*? ACTIVAMOS DISPLAY GRID */
                                                          
                                                          /*? COLUMNAS */
    grid-template-columns: 200px 20% 100px;               /** Aquí decidimos cuántas col queremos tener, en este caso 3, 1 de 200px (ancho fijo) 1 del 20% de su padre (ancho variable) 1 de 100px (ancho fijo) */
    /* grid-template-columns: 1fr 0.5fr 0.5fr 1fr; */     /** Aquí fraccionamos las col, en este caso, hay 4 col que se dividen en fracciones (1fr) fracción entera (0.5fr) ocupa la mitad. de este modo son de ancho variable */
    /* grid-template-columns: repeat(10, 1fr); */         /** Con repeat, indicamos las col que queremos y la medida, para no escribir 10 veces 1fr */

                                                          /*? FILAS */
    grid-template-rows: 150px 100px;                      /** Aquí decidimos el comportamiento de las filas, en este caso, la fila 1 ocupa 150px y la 2 100px */
    /* grid-auto-rows: 100px; */                          /* Si tuviéramos filas que se añaden automáticamente, le decimos que midan 100px por defecto (poco habitual) */

                                                          /*? ESPACIADO */
    /* column-gap: 10px; */                               /** Separamos las columnas 10px */
    /* row-gap: 10px; */                                  /** Separamos las filas 10px */
    gap: 10px;                                            /** Separamos columnas y filas a la vez 10px */

                                                          /*? ALINEACIÓN HORIZONTAL DE CADA ELEMENTO DENTRO DE SU CELDA (TODOS A LA VEZ) */
    /* justify-items: flex-start; */                      /** Alineamos el contenido al princpio de la celda (por defecto) */
    /* justify-items: flex-end; */                        /** Alineamos el contenido al final de la celda */
    /* justify-items: center; */                          /** Alineamos el contenido en el centro de la celda */
    /* justify-items: stretch; */                         /** Por defecto, ocupa toda la celda */                               
                                                          /*? ALINEACIÓN VERTICAL DE CADA ELEMENTO DENTRO DE SU CELDA (TODOS A LA VEZ) */
    /* align-items: flex-start; */                        /** Alineamos el contenido arriba de la celda (por defecto) */
    /* align-items: flex-end; */                          /** Alineamos el contenido abajo de la celda */
    /* align-items: center; */                            /** Alineamos el contenido en el centro de la celda */
    /* align-items: stretch; */                           /** Por defecto, ocupa toda la celda */ 
    /* align-items: baseline; */                          /** Alineamos el contenido respecto a su celda, alineando cada celda según su texto */
    /* place-items: center center; */                     /*! Shorthand, aquí le damos las dos instrucciones a la vez, horizontal y vertical centrados */

                                                          /*? ALINEACIÓN INDIVIDUAL DE UN ELEMENTO DENTRO DE SU CELDA */
    /* align-self: flex-start...; */                      /** Alineación vertical */
    /* justify-self: flex-start...; */                    /** Alineación horizonal */                                      

                                                          /*? ALINEACIÓN HORIZONTAL DE TODO EL CONTENIDO DEL PADRE */
    /* justify-content: flex-start; */                    /** Alineamos todo el contenido al principio (por defecto) */
    /* justify-content: flex-end; */                      /** Alineamos todo el contenido al final */
    /* justify-content: center; */                        /** Alineamos todo el contenido al centro */                         
    /* justify-content: space-between; */                 /** Alineamos todo el contenido de principio a fin con espacios en medio */                                 
    /* justify-content: space-around; */                  /** Alineamos todo el contenido de principio a fin con espacios iguales en medio, y espacios de la mitad del tamaño al principio y al final */                             
    /* justify-content: space-evenly; */                  /** Alineamos todo el contenido de principio a fin con espacios iguales en medio, al principio y al final */                              
    
                                                          /*? ALINEACIÓN VERTICAL DE TODO EL CONTENIDO DEL PADRE */
    /* align-content: flex-start; */                      /** Alieneamos todo el contenido arriba (por defecto) */
    /* align-content: flex-end; */                        /** Alieneamos todo el contenido abajo */  
    /* align-content: center; */                          /** Alieneamos todo el contenido al centro */
    /* align-content: space-between; */                   /** Alineamos todo el contenido de arriba a abajo con espacios en medio */ 
    /* align-content: space-around; */                    /** Alineamos todo el contenido de arriba a abajo con espacios iguales en medio, y espacios de la mitad del tamaño arriba y abajo */
    /* align-content: space-evenly; */                    /** Alineamos todo el contenido de arriba a abajo con espacios iguales en medio, arriba y abajo */
    /* place-content: center; */                          /*! Shorthand, aquí le damos las dos instrucciones a la vez, horizontal y vertical centrados. Poniendo sólo center, centra los dos valores */ 
}
.caja {
    padding: 10px;
    border: 2px solid white;
    font-size: 1.3rem;                                    
}

.caja1 {
    background: yellow;                                  /*? COLOCACIÓN DE UNA CAJA EN UNA CELDA DISTINTA */
    
    /* grid-column-start: 2; */                            /** Aquí indicamos en qué nº de columna debe empezar (por lo tanto, colocarse) */
    /* grid-column-end: 3; */                              /** Aquí indicamos en qué nº de columna debe terminar (se puede extender varias columnas) */
    /* grid-row-start: 2; */                               /** Aquí indicamos en qué nº de fila debe empezar (por lo tanto colocarse) */
    /* grid-row-end: 3; */                                 /** Aquí indicamos en que nº de fila debe terminar (se puede extender varias filas) */
    /* grid-column: 2 / 3; */                              /*! Shorthand, más utilizado que lo anterior. Indicamos las dos posiciones en la misma línea */
    /* grid-row: 2 / 3; */
    
    /* grid-column-start: 2; */
    /* grid-column-end: span 2; */                         /* Con span podemos decirle que se extienda 2 celdas, vez de decir la celda en la que termina */
}
.caja2 {
    background: pink;
}
.caja3 {
    background: blueviolet;
}
.caja4 {
    background: crimson;
}
.caja5 {
    background: greenyellow;
}

                                               /*! ============= GRID AREAS ============== */
.caja-padre2 {
    margin-bottom: 1rem;
    border: 3px solid black;
    background: white;
    height: 500px;

    display: grid;                              /*? ACTIVAMOS DISPLAY GRID */
    grid-template-columns: 1fr 1fr 1fr;         /** Indicamos las columnas que queremos tener (opcional) */

    grid-template-areas:                        /*? Activamos grid areas */
    "cabecera cabecera cabecera"                /** Damos nombre a las 3 celdas de arriba */
    "contenido contenido main"                  /** Damos nombre a las 3 celdas del medio */
    "pie pie1 pie1";                            /** Damos nombre a las 3 celdas de abajo */
}
.caja6 {
    background: yellow;
    grid-area: cabecera;                        /** Así indicamos que caja.6 ocupe todo lo que se llame "cabecera", en este caso toda la fila de arriba */
}
.caja7 {
    background: pink;
    grid-area: contenido;                       /** Así indicamos que caja.7 ocupe todo lo que se llame "contenido", en este caso dos celdas */
}
.caja11 {
    background: orange;
    grid-area: pie1;                            /** Así indicamos que caja.11 ocupe todo lo que se llame "pie1", en este caso dos celdas */
}
    .caja8 {
    background: blueviolet;
}
.caja9 {
    background: crimson;
}
.caja10 {
    background: greenyellow;
}